ERROR: comments.test: compile: <?php #function test() { print "ok"; } test(); ?> - arguments: ((SyntaxError "Invalid token: " #\#))
ERROR: comments.test: compile: <?php //function test() { return 5; } $a = test(); print $a; ?> - arguments: ((ParseSyntaxError "Syntax error: unexpected token : " #<lexical-token category: divide source: #f value: "/">))
PASS: comments.test: compile: <?php /* some comment */ ?>
PASS: comments.test: compile: <?
#this #is a # comment # nested #shouldn't matter
?>
PASS: comments.test: compile: <%
//this is a comment ?>
%>
PASS: comments.test: compile: <script language="php">
/* multi-line comment on a single line*/
</script>
ERROR: comments.test: compile: <?
/*

multi-line 
comment 
on
#test
multiple
//what?
lines

*/ - arguments: ((ParseSyntaxError "Syntax error: unexpected token : " #<lexical-token category: divide source: #f value: "/">))
PASS: comments.test: compile: <?php
#comment
//comment
/*comment*/
PASS: functions.test: compile: <?php function test() { print "ok"; } test(); ?>
PASS: functions.test: compile: <?php function test() { return 5; } $a = test(); print $a; ?>
PASS: functions.test: compile: <?php function a12_21aa_45(){ print 1;} a12_21aa_45(); ?>
ERROR: functions.test: compile: <? function a(){} ?> - arguments: ((ParseSyntaxError "Syntax error: unexpected token : " #<lexical-token category: close-brace source: #f value: "}">))
PASS: functions.test: compile: <?php function _aFunc() { print "sure"; } _aFunc(); ?>
PASS: functions.test: compile: <?php
function test1($a, $b, $c)
{
  if($a == $b)
    return $c;
  else
    return $b;
}

$a = test1(1, 1, 2);
$b = test1(1, 2, 1);

print $a;
print $b;
?>
PASS: functions.test: compile: <?php
function test_some_func() {
  print "yar";
}

test_some_func();
ERROR: functions.test: compile: <?php
function a() { return 1; }
function b() { return 2; }
function c() { retunr 3; }

function test($a, $b, $c) {
  print $c;print $b; print $a;
}

test(a(), b(), c());
?> - arguments: ((ParseSyntaxError "Syntax error: unexpected token : " #<lexical-token category: T_LNUMBER source: #f value: "3">))
ERROR: functions.test: compile: <script language="php">
notyetdefined();

function notyetdefined() { print "works"; }
?> - arguments: ((unbound-variable "module-lookup" "Unbound variable: ~S" (notyetdefined) #f))
PASS: helloworld.test: parser: hello world
PASS: helloworld.test: parser: <?php print "hello world"; ?>
PASS: helloworld.test: compile: hello world
PASS: helloworld.test: compile: <?php print "hello world"; ?>
PASS: helloworld.test: compile: hello <?php print "world"; ?>
PASS: helloworld.test: compile: <?php print "hello "; ?>world
PASS: helloworld.test: compile: hello<?php ?> world
PASS: helloworld.test: compile: <?php return "hello world"; ?>
PASS: print.test: compile: <?php print ""; ?>
PASS: print.test: compile: <?php print null; ?>
PASS: print.test: compile: <?php print 5; ?>
PASS: print.test: compile: <?php print "some string"; print "another string"; ?>
PASS: print.test: compile: <?php $a = 1; print $a; ?>
ERROR: print.test: compile: <?php $a = 2; print "$a"; ?> - arguments: ((ParseSyntaxError "Syntax error: unexpected token : " #<lexical-token category: T_ENCAPSED_AND_WHITESPACE source: #f value: "\"$a\"">))
PASS: print.test: compile: <?php function test() { return 12; } print test(); ?>
PASS: print.test: compile: <?php $a = 3; print ++$a; ?>
PASS: print.test: compile: <?php $a = 4; print --$a; ?>

Totals for this test run:
passes:                 27
failures:               0
unexpected passes:      0
expected failures:      0
unresolved test cases:  0
untested test cases:    0
unsupported test cases: 0
errors:                 7

